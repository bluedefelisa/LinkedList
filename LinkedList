# LinkedList
-Print the Elements of a Linked List

void printLinkedList(SinglyLinkedListNode* head) {
for(SinglyLinkedListNode* p = head; p != NULL; p = p->next)
{
    cout << p->data <<endl;
}

}

-Insert a Node at the Tail of a Linked List

SinglyLinkedListNode* insertNodeAtTail(SinglyLinkedListNode* head, int data) {

    SinglyLinkedListNode* tail = new SinglyLinkedListNode(data);
    tail -> next = NULL;
    
    SinglyLinkedListNode* p = head;
    
    if(p == NULL)
    {
        head = tail;
    }
    else
    {
        p = head;
        while(p -> next != NULL)
        {
            p = p -> next;
        }
        p -> next = tail;
    }
    
    return head;
}

-Insert a node at the head of a linked list

SinglyLinkedListNode* insertNodeAtHead(SinglyLinkedListNode* llist, int data) {

  
    SinglyLinkedListNode* p = new SinglyLinkedListNode(data);
    p -> next = llist ;
   
    llist = p;
    
    return llist;
    
}


-Insert a node at a specific position in a linked list

SinglyLinkedListNode* insertNodeAtPosition(SinglyLinkedListNode* head, int data, int position) 
{
    SinglyLinkedListNode* tmp = head;
    SinglyLinkedListNode* p = new SinglyLinkedListNode(data);
    if(position == 0)
    {
        p->next = tmp;
        head = p;
        return p;
    }
    int c = 0;
    while(c != position - 1)
    {
        c++;
        tmp = tmp->next;
    }
    p->next = tmp->next;
    tmp->next = p;
    return head;
}

-Delete a Node

SinglyLinkedListNode* deleteNode(SinglyLinkedListNode* head, int position) {
  
   if (head != NULL)
   {
       if(position == 0)
       {
           SinglyLinkedListNode* p = head;
           p = p -> next;
           delete(head);
           return p;
       }
       else 
       {
           int count = 0;
           SinglyLinkedListNode* tmp = head;
           while(count < position - 1)
           {
               tmp = tmp -> next;
               count ++;
           }
           SinglyLinkedListNode* n = tmp -> next;
           tmp -> next = tmp -> next -> next;
           delete(n);
       }
   }
   return head;
}


-Print in Reverse

void reversePrint(SinglyLinkedListNode* head) {
    if(head == NULL) return;
    reversePrint(head -> next);
    cout << head -> data << endl;
    
    
}

-Reverse a linked list

SinglyLinkedListNode* reverse(SinglyLinkedListNode* head) {

    SinglyLinkedListNode* p = NULL;
    while(head != NULL)
    {
        SinglyLinkedListNode* tmp = head -> next;
        head -> next = p;
        p = head;
        head = tmp;
    }
    return p;
    
    

}
-Compare two linked lists

bool compare_lists(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {
    if(head1 == NULL and head2 == NULL)
    {
       return true; 
    }
    else if(head1 == NULL and head2 != NULL)
    {
        return false;
    }
    else if(head1 != NULL and head2 == NULL)
    {
        return false;
    }
    else if(head1 -> data != head2 -> data)  
    {
        return false;
    }
    return compare_lists(head1 -> next, head2 -> next);
}


-Merge two sorted linked lists

SinglyLinkedListNode* mergeLists(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {
    if(head1 == NULL && head2 == NULL)
    {
        return NULL;
    }
    else if(head1 == NULL)
    {
        return head2;
    }
    else if(head2 == NULL)
    {
        return head1;
    }
    
    SinglyLinkedListNode* p;
    if(head1 -> data < head2 -> data)
    {
        p = head1;
        p -> next = mergeLists(head1 -> next, head2);
    }
    else
    {
        p = head2;
        p -> next = mergeLists(head1, head2 -> next);
    }
    return p;


}


-Get Node Value

int getNode(SinglyLinkedListNode* head, int positionFromTail) 
{
    SinglyLinkedListNode* p = head;
    SinglyLinkedListNode* tmp = head;
    int count = 0;
    while(p != NULL and count < positionFromTail)
    {
        p = p -> next;
        count++;
    }
    while(p -> next != NULL)
    {
            p = p -> next;
            tmp = tmp -> next;
    }
    return tmp -> data;
}


-Delete duplicate-value nodes from a sorted linked list

SinglyLinkedListNode* removeDuplicates(SinglyLinkedListNode* head) 
{
    SinglyLinkedListNode* p = head;
    while(p -> next != NULL)
    {
        if(p -> data == p -> next -> data)
     {
         SinglyLinkedListNode* tmp = p -> next;
         p -> next = tmp -> next;
         delete(tmp);  
     }
     else {
         p = p -> next;
     }
    }
    return head;
}

-Cycle Detection

bool has_cycle(SinglyLinkedListNode* head) {
    SinglyLinkedListNode* prev = head;
    SinglyLinkedListNode* p = head;
    
    while (p != NULL and prev != NULL and p -> next)
    {
        p = p -> next -> next;
        prev = prev -> next;
        if(p == prev)
        {
            return true;
        }
    }
    return false;
    


}

-Find Merge Point of Two Lists

int findMergeNode(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) 
{
  SinglyLinkedListNode *p1 = head1;
  SinglyLinkedListNode *p2 = head2;
  int c1 = 0, c2 = 0;
  while(head1 != NULL)
  {
    c1++;
    head1 = head1 -> next;
  }
  head1 = p1;
  while(head2 != NULL)
  { 
    c2++;
    head2 = head2 -> next;
  }
  head2 = p2;
  if(c1 > c2)
  {
    p1 = head1;
    p2 = head2;
  }
  else 
  {
    p1 = head2;
    p2 = head1;
  }
  int d = 0;
  c1 = abs(c1 - c2);
    for (int i = 0; i < c1; i++)
    { 
        p1 = p1 -> next; 
    }
  while (p1 != NULL and p2 != NULL) 
    { 
        if(p1 == p2) 
        {
          d = p1 -> data;
          break; 
        }
        p1 = p1 -> next; 
        p2 = p2 -> next; 
    } 
  return d;

}


-Inserting a Node Into a Sorted Doubly Linked List

DoublyLinkedListNode* sortedInsert(DoublyLinkedListNode* head, int data) 
{
    DoublyLinkedListNode *p = (DoublyLinkedListNode*)malloc(sizeof(DoublyLinkedListNode));
    DoublyLinkedListNode *tmp = head;
    p -> data = data;
if(tmp->data > data)
{
    tmp->prev = p;
    p->next = tmp;
    p->prev = NULL;
    head = p;
    return head;
}
while(tmp != NULL)
{
    if(tmp->data >= data)
    {
        p->next = tmp;
        p->prev = tmp->prev;
        tmp->prev->next = p;
        return head;
    }
    else if(tmp->next == NULL)
    {
        tmp->next = p;
        p->prev = tmp;
        p->next = NULL;
        return head;
    }
    tmp = tmp->next;
}
return head;

}


-Reverse a doubly linked list

DoublyLinkedListNode* reverse(DoublyLinkedListNode* head) 
{
    DoublyLinkedListNode* p = head;
    DoublyLinkedListNode* tmp = head;
    while(tmp !=NULL)
    {
        p = tmp->prev;
        tmp->prev = tmp->next;
        tmp->next = p;
        tmp = tmp->prev;
    }
    if(p != NULL)
    {
        head = p->prev;
    }
    return head;
}
